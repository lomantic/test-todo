{"version":3,"sources":["colors.js","App.js"],"names":["theme","App","useEffect","loadToDos","useState","completed","editing","setEditing","currentKey","setCurrentKey","working","setWorking","editText","setEditText","text","setText","onEditChangeText","payload","Object","toDos","setToDos","saveToDos","toSave","a","async","AsyncStorage","setItem","JSON","stringify","console","log","getItem","state","toDoInStorage","parse","editSubmitTodo","Alert","alert","newToDos","View","style","styles","container","StatusBar","header","TouchableOpacity","onPress","Text","fontSize","fontWeight","color","TextInput","placeholder","editable","returnKeyType","onChangeText","onSubmitEditing","Date","now","value","input","ScrollView","keys","map","key","toDo","icon","cancelEditTodo","MaterialIcons","name","size","iconBox","BouncyCheckbox","checkbox","isChecked","onCheckBoxClicked","fillColor","toDoText","toDoTextCompleted","editToDo","disabled","Entypo","Platform","OS","confirm","deleteTodo","Fontisto","StyleSheet","create","flex","backgroundColor","paddingHorizontal","justifyContent","flexDirection","marginTop","btnText","paddingVertical","borderRadius","marginVertical","marginBottom","alignItems","textDecorationLine","textDecorationStyle","marginLeft","opacity","marginRight"],"mappings":"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","file":"static/js/app.2effbacd.chunk.js","sourcesContent":["export const theme = {\r\n    bg: \"black\",\r\n    grey: \"#3A3D40\",\r\n    toDoBg: \"#5C5C60\",\r\n}","import { StatusBar } from 'expo-status-bar';\nimport React , {useState, useEffect} from 'react';\nimport { \n        StyleSheet, \n        Text, \n        View, \n        TouchableOpacity, \n        TextInput, \n        ScrollView, \n        Alert,\n        Platform, \n      } from 'react-native';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { Fontisto } from '@expo/vector-icons';\nimport { Entypo } from '@expo/vector-icons';\nimport { MaterialIcons } from '@expo/vector-icons'; \nimport BouncyCheckbox from \"react-native-bouncy-checkbox\";\nimport { theme } from './colors';\n\nconst STORAGE_KEY = \"@toDos\";\nconst STORAGE_TYPE_KEY = \"@working\";\n\nexport default function App() {\n\n  useEffect(() => {\n    loadToDos();\n  },[])\n  const [completed, setCompleted] = useState(false); \n  const [editing, setEditing] = useState(false);\n  const [currentKey, setCurrentKey] = useState(\"\");\n  const [working, setWorking] = useState(true);\n  const [editText, setEditText] = useState(\"\");\n  const [text, setText] = useState(\"\");\n  const onChangeText = (payload) => setText(payload);\n  const onEditChangeText = (payload) => setEditText(payload);\n  const [toDos, setToDos] = useState(Object);\n\n  const travel = async() => {\n    try{\n      setWorking(false);\n      await AsyncStorage.setItem(STORAGE_TYPE_KEY, JSON.stringify(false))\n    }catch(e){\n      //error\n      console.log(e);\n    }\n  };\n  const work = async() => {\n    try{\n      setWorking(true);\n      await AsyncStorage.setItem(STORAGE_TYPE_KEY, JSON.stringify(true))\n    }catch(e){\n      //error\n      console.log(e);\n    }\n  };\n  \n  const saveToDos= async(toSave) => {\n    try{\n      await AsyncStorage.setItem(STORAGE_KEY, JSON.stringify(toSave))\n    }catch(e){\n      //error\n      console.log(e);\n    }\n  };\n  const loadToDos = async() => {\n    try{\n      const state = await AsyncStorage.getItem(STORAGE_TYPE_KEY);\n      const toDoInStorage = await AsyncStorage.getItem(STORAGE_KEY);\n      if(toDoInStorage){\n        setWorking(JSON.parse(state));\n        setToDos(JSON.parse(toDoInStorage));\n      }\n\n      //console.log(\"this is Loading\");\n      //console.log(toDoInStorage);\n    }catch(e){\n      //error\n      console.log(e);\n    }\n  }\n  const addTodo = async() => { \n    if(text === \"\"){\n      return;\n    }\n    //const newToDos= Object.assign({}, toDos, {[Date.now()]: {text, work: working}});\n    const newToDos = {...toDos, [Date.now()]: {text, working, editing, completed} };\n    setToDos(newToDos);\n    setText(\"\");\n    await saveToDos(newToDos);\n  };\n  const deleteTodo = async(key) => {\n    if (Platform.OS === \"web\"){\n      const ok = confirm(\"Are you sure you want to delete?\");\n      if (ok) {\n        const newToDos = {...toDos};\n        delete newToDos[key];\n        setToDos(newToDos);\n        await saveToDos(newToDos);\n      }\n    }else{\n      Alert.alert(\n        \"Delete to do\", \"Are you sure?\", [\n          {text:\"Cancel\"},\n          {text:\"Yes\", onPress: async() => {\n            const newToDos = {...toDos};\n            delete newToDos[key];\n            setToDos(newToDos);\n            await saveToDos(newToDos);\n          }},\n      ])\n    }\n  };\n\n  const editToDo = async(key) => {\n    const newToDos = {...toDos};\n    setEditing(true);\n    newToDos[key].editing = true;\n    setToDos(newToDos);\n    setCurrentKey(key);\n    await saveToDos(newToDos);\n  };\n  const editSubmitTodo = async() => {\n    if(editText === \"\"){\n      Alert.alert(\"Edit Error\", \"You must type at least one word\");\n      return;\n    }\n    const newToDos = {...toDos};\n    newToDos[currentKey].text = editText;\n    newToDos[currentKey].editing = false;\n    setEditing(false);\n    setToDos(newToDos);\n    setEditText(\"\");\n    await saveToDos(newToDos);\n  }\n  const cancelEditTodo =async(key) => {\n    const newToDos = {...toDos};\n    newToDos[currentKey].editing = false;\n    setEditing(false);\n    setEditText(\"\");\n    setToDos(newToDos);\n    await saveToDos(newToDos);\n  }\n  const onCheckBoxClicked = async(key) => {\n    const newToDos = {...toDos};\n    newToDos[key].completed = !(toDos[key].completed);\n    //console.log(\"This is newTodos\");\n    //console.log(newToDos);\n    setToDos(newToDos);\n    //console.log(\"This is Todos\");\n    //console.log(toDos);\n    await saveToDos(newToDos);\n  }\n\n  return (\n    <View style={styles.container}>\n      <StatusBar style=\"auto\" />\n      <View style={styles.header}>\n        <TouchableOpacity onPress={work}>\n          <Text style={{\n            fontSize: 44,\n            fontWeight: \"600\", \n            color: working ? \"white\" : theme.grey\n          }}>\n            Work\n          </Text>\n        </TouchableOpacity>\n        <TouchableOpacity onPress={travel}>\n          <Text style={{    \n            fontSize: 44,\n            fontWeight: \"600\", \n            color: !working ? \"white\" : theme.grey\n          }}>\n              Travel\n          </Text>\n        </TouchableOpacity>\n      </View>\n      \n      <TextInput \n        placeholder={working ? \"Add to do\" : \"Where to go\"}\n        editable = {editing === true ? false : true}\n        returnKeyType=\"send\"\n        onChangeText={onChangeText}\n        onSubmitEditing={addTodo}\n        value={text}\n        style={styles.input}\n      />\n      <ScrollView>\n        {Object.keys(toDos).map((key) => (\n          toDos[key].working === working ? \n          (!toDos[key].editing ? (\n            <View style={styles.toDo} key={key}>\n              <View style={styles.iconBox}>\n                <BouncyCheckbox\n                  style={styles.checkbox}\n                  //value={completed}\n                  isChecked={toDos[key].completed}\n                  onPress={() => onCheckBoxClicked(key)}\n                  //onValueChange={setCompleted}\n                  fillColor={theme.grey}\n                  //color={completed ? theme.grey : undefined}\n                />{\n                  toDos[key].completed === false ?(\n                    <Text style={styles.toDoText}>{toDos[key].text}</Text>\n                  )\n                  :(\n                    <Text style={styles.toDoTextCompleted}>{toDos[key].text}</Text>\n                  )\n                }\n                \n              </View>\n              <View style={styles.iconBox}>\n                {\n                  toDos[key].completed === false ? (\n                  <TouchableOpacity style={styles.icon} onPress ={() => editToDo(key)} disabled={editing === true ? true : false}>\n                    <Entypo name=\"edit\" size={18} color={theme.grey} />\n                  </TouchableOpacity>)\n                  : null\n                }\n                <TouchableOpacity style={styles.icon} onPress ={() => deleteTodo(key)} disabled={editing === true ? true : false}>\n                  <Fontisto name=\"trash\" size={18} color={theme.grey} />\n                </TouchableOpacity>\n              </View>\n            </View>\n            )\n            : (\n              <View style={styles.toDo} key={`${key}_edit`}>\n                <TextInput \n                  placeholder={toDos[key].text}\n                  returnKeyType=\"send\"\n                  onChangeText={onEditChangeText}\n                  onSubmitEditing={editSubmitTodo}\n                />\n                <TouchableOpacity style={styles.icon} onPress ={() => cancelEditTodo(key)}>\n                  <MaterialIcons name=\"cancel\" size={18} color={theme.grey} />\n                </TouchableOpacity>\n\n              </View>\n            )\n          )\n          : null\n        ))}\n      </ScrollView>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: theme.bg,\n    paddingHorizontal: 20,\n  },\n  header: {\n    justifyContent: \"space-between\",\n    flexDirection: \"row\",\n    marginTop: 100,\n\n  },\n  btnText: {\n    fontSize: 44,\n    fontWeight: \"600\",\n  },\n  input: {\n    backgroundColor: \"white\",\n    paddingHorizontal: 20,\n    paddingVertical: 10,\n    borderRadius: 30,\n    marginVertical: 20,\n    fontSize: 15,\n  },\n  toDo: {\n    backgroundColor: theme.toDoBg,\n    marginBottom: 10,\n    paddingVertical: 10,\n    paddingHorizontal: 20,\n    borderRadius: 15,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n  },\n  toDoText: {\n    color: \"white\",\n    fontSize: 15,\n  },\n  toDoTextCompleted:{\n    color: theme.grey,\n    fontSize: 15,\n    textDecorationLine: 'line-through', \n    textDecorationStyle: 'solid'\n  },\n  iconBox: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n  },\n  icon:{\n    marginLeft: 8,\n    opacity: 1,\n  },\n  checkbox: {\n    marginRight: 8,\n  },\n});\n"],"sourceRoot":""}